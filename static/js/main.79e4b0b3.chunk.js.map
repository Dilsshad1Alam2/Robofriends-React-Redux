{"version":3,"sources":["reducers.js","serviceWorker.js","components/Card.js","components/RobotList.js","components/SearchBox.js","components/Scroll.js","container/App.js","actions.js","constants.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","isPending","robots","error","Boolean","window","location","hostname","match","Card","name","email","id","className","src","alt","RobotList","cardArray","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","this","onRequestRobots","onSearchChange","filteredRobots","filter","toLowerCase","includes","Component","connect","state","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.79e4b0b3.chunk.js","sourcesContent":[" import { \r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED \r\n} from './constants.js'\r\n\r\nconst initialStateSearch = {\r\nsearchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action = {}) => {\r\n\tswitch(action.type){\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn Object.assign({},state, { searchField: action.payload} );\r\n\t\tdefault:\r\n\t\t\treturn state;\t\r\n\r\n\t}\r\n}\r\n\r\nconst initialStateRobots = {\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action= {}) =>{\r\n\tswitch(action.type){\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn Object.assign({},state, { isPending: true });\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn Object.assign({},state, {robots:action.payload, isPending:false});\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn Object.assign({},state, {error:action.payload, isPending:false});\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\r\n\t}\t\r\n\r\n\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nconst Card =({name, email, id})=>{\r\n\treturn(\r\n\t\t<div className='bg-light-green dib pa3 ma2 grow bw5 shadow-5 tc br3'>\r\n\t\t\t<img src={`https://robohash.org/${id}?size=180x181`} alt=\"robots\" />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{ name }</h2>\r\n\t\t\t\t<p>{ email } </p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport  default Card;","import React from 'react'\r\nimport Card from './Card';\r\n\r\n\r\nconst RobotList = ( {robots} ) => {\r\n\tconst cardArray = robots.map((user,i)=>{\r\n\t\treturn(\r\n\t\t\t<Card \r\n\t\t\tkey = {i}\r\n\t\t\tid = {robots[i].id}\r\n\t\t\tname={robots[i].name}\r\n\t\t\temail={robots[i].email}\r\n\t\t\t/>\r\n\t\t\t)\r\n\t})\r\n\r\n\treturn(\r\n\t<div>\r\n\t\t\t{cardArray}\r\n\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default RobotList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange} ) =>{\r\n\treturn(\r\n\t\t<div className =\"pa2 tc\">\r\n\t\t<input type=\"search\" \r\n\t\tplaceholder=\"Search Robots\" className=\" pa3 bg-light-green tc ba bw1\" \r\n\t\tonChange = { searchChange }\r\n\t\t/>\r\n\t\t</div>\r\n\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) =>{\r\n\treturn( \t\r\n\t<div style={{ overflowY:'scroll' , border:'3px solid black' ,height: '480px'}}>\r\n\t{props.children}\r\n\t</div> )\r\n\r\n\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport RobotList  from '../components/RobotList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\n\r\nimport { setSearchField, requestRobots } from '../actions.js';\r\n\r\nconst mapStateToProps = state => {\r\n\treturn{\r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\terror: state.requestRobots.error\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n\treturn {\r\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots: () => dispatch(requestRobots())\r\n\t}\r\n}\r\n\r\n\r\nclass App extends Component{\r\n\tcomponentDidMount(){\r\n\t\tthis.props.onRequestRobots();\r\n\t}\r\n\t\r\n\trender(){\r\n\t\tconst { searchField, onSearchChange, robots, isPending,} =this.props;\r\n\t\tconst filteredRobots =robots.filter(robots => {\r\n\t\t \treturn robots.name.toLowerCase().includes(searchField.toLowerCase())\r\n\t})\r\n\r\n\t\treturn isPending ?\r\n\t\t<h1 className=\"tc\" > Loading </h1> :\r\n\t\t(\r\n\t\t<div className=\"tc\">\r\n\t\t<h1> ROBOFRIENDS </h1>\r\n\t\t<SearchBox searchChange = { onSearchChange }/>\r\n\t\t<Scroll>\r\n\t\t<RobotList robots = { filteredRobots }/>\r\n\t\t</Scroll>\r\n\t\t</div>\r\n\t\t );\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\r\n","import { \r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED \r\n} from './constants.js'\r\n\r\n\r\nexport const setSearchField = (text) => ({\r\n\ttype: 'CHANGE_SEARCH_FIELD',\r\n\tpayload: text\r\n\t})\r\n\r\nexport const requestRobots =() =>(dispatch)=>{\r\n\tdispatch({type:REQUEST_ROBOTS_PENDING });\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t  .then(response => response.json())\r\n\t  .then(data => dispatch({ type:REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n\t  .then(error => dispatch({type:REQUEST_ROBOTS_FAILED, payload: error }))\r\n}\r\n\r\n","export const CHANGE_SEARCH_FIELD  = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport {createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { searchRobots, requestRobots } from './reducers'\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\nimport App from './container/App';\r\n\r\nconst logger = createLogger();\r\n\r\nconst rootReducer = combineReducers({searchRobots, requestRobots});\r\nconst store = \r\n\tcreateStore(rootReducer, applyMiddleware(thunkMiddleware,logger));\r\n\r\nReactDOM.render(\r\n\t\t\t\t<Provider store={store}>\r\n\t\t\t\t  <App/>\r\n\t\t\t\t</Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}